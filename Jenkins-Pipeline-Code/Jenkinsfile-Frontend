pipeline {
    agent any 
    
    tools {
        jdk 'jdk17'  
        nodejs 'nodejs'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ECR_REPO_NAME = "frontend"
        AWS_DEFAULT_REGION = "us-west-2"
        REPOSITORY_URI = "248189909469.dkr.ecr.us-west-2.amazonaws.com/"
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'master', credentialsId: 'GITHUB', url: 'https://github.com/thakurrajesh22293/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=frontend \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://52.12.89.14:9000 \
                        -Dsonar.login=sqp_6cc0414651f4dea9afc8c4db08acabe31c99e97a
                        '''
                    }
                }
            }
        }

        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') { 
                        sh 'ls -l' // Debug: Check if files exist
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t ${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} .' 
                    }
                }
            }
        }

        stage("ECR Image Pushing") {
            steps {
                script {
                    sh '''
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                        docker tag ${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                        docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
                GIT_USER_NAME = "thakurrajesh22293"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "thakurrajesh22293@gmail.com"
                            git config user.name "RajeshThakur-DevOps"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(awk -F'[: ]+' '/image:/ {print $NF}' deployment.yaml)
                            echo $imageTag
                            sed -i "s|${AWS_ECR_REPO_NAME}:${imageTag}|${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh '''
                        echo "Updating kubeconfig for cluster: three-tier-cluster"
                        aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name three-tier-cluster
                        
                        echo "Checking if namespace exists..."
                        kubectl get namespace three-tier || kubectl create namespace three-tier
                        
                        echo "Applying Kubernetes manifests..."
                        kubectl apply -f Kubernetes-Manifests-file/Frontend/deployment.yaml --force
                        kubectl apply -f Kubernetes-Manifests-file/Frontend/service.yaml
                        
                        echo "Waiting for Deployment to be available with timeout..."
                        kubectl rollout status deployment/frontend -n three-tier --timeout=180s || kubectl rollout restart deployment/frontend -n three-tier
                        
                        echo "Checking if pods are running..."
                        kubectl get pods -n three-tier
                    '''
                }
            }
        }
    }
}
